version: "3.7"
services:
  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3-management-alpine
    container_name: gocqrs-rabbitmq
    volumes:
      - ./.docker/rabbitmq/etc/:/etc/rabbitmq/
      - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/
      - ./.docker/rabbitmq/logs/:/var/log/rabbitmq/
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_ERLANG_COOKIE: rabbitmq_cookie
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_PORT: 5672
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - backend
  db:
    image: mysql:8
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_USER: goqrs
      MYSQL_PASSWORD: goqrs
      MYSQL_DATABASE: image_goqrs
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
      DB_HOST: tcp(db:3306)
    volumes:
      - ./docker/data:/docker-entrypoint-initdb.d
    networks:
      - backend

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    restart: always
    ports:
      - "9200:9200"
    volumes:
      - ./docker/esdata:/usr/share/elasticsearch/data
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - backend

  # Api Service
  api:
    build:
      context: ./
      dockerfile: ./docker/build/golang/Dockerfile
    environment:
      API_PORT: "8080"
      MYSQL_USER: goqrs
      MYSQL_PASSWORD: goqrs
      MYSQL_DATABASE: image_goqrs
      DB_HOST: tcp(db:3306)
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_ERLANG_COOKIE: rabbitmq_cookie
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_PORT: 5672
      ES_URL: "http://es:9200"
    ports:
      - "8080:8080"
    volumes:
      - ./:/go:rw
    networks:
      - backend
    depends_on:
      - rabbitmq

volumes:
  esdata:
    driver: local

networks:
  backend:
    driver: "bridge"

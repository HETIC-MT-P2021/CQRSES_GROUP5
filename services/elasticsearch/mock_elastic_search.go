// Code generated by MockGen. DO NOT EDIT.
// Source: services/elasticsearch/elastic_search.go

// Package mock_elasticsearch is a generated GoMock package.
package elasticsearch

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEsService is a mock of EsService interface.
type MockEsService struct {
	ctrl     *gomock.Controller
	recorder *MockEsServiceMockRecorder
}

// MockEsServiceMockRecorder is the mock recorder for MockEsService.
type MockEsServiceMockRecorder struct {
	mock *MockEsService
}

// NewMockEsService creates a new mock instance.
func NewMockEsService(ctrl *gomock.Controller) *MockEsService {
	mock := &MockEsService{ctrl: ctrl}
	mock.recorder = &MockEsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEsService) EXPECT() *MockEsServiceMockRecorder {
	return m.recorder
}

// GetDocumentByIndexAndID mocks base method.
func (m *MockEsService) GetDocumentByIndexAndID(arg0 context.Context, arg1, arg2 string) (*Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentByIndexAndID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentByIndexAndID indicates an expected call of GetDocumentByIndexAndID.
func (mr *MockEsServiceMockRecorder) GetDocumentByIndexAndID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentByIndexAndID", reflect.TypeOf((*MockEsService)(nil).GetDocumentByIndexAndID), arg0, arg1, arg2)
}

// NewDocument mocks base method.
func (m *MockEsService) NewDocument(arg0 context.Context, arg1 string, arg2 *Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDocument", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewDocument indicates an expected call of NewDocument.
func (mr *MockEsServiceMockRecorder) NewDocument(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDocument", reflect.TypeOf((*MockEsService)(nil).NewDocument), arg0, arg1, arg2)
}

// NewIndex mocks base method.
func (m *MockEsService) NewIndex(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIndex", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewIndex indicates an expected call of NewIndex.
func (mr *MockEsServiceMockRecorder) NewIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIndex", reflect.TypeOf((*MockEsService)(nil).NewIndex), arg0, arg1)
}

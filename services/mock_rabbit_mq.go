// Code generated by MockGen. DO NOT EDIT.
// Source: services/rabbit_mq.go

// Package mock_services is a generated GoMock package.
package services

import (
	reflect "reflect"

	eventsourcing "github.com/HETIC-MT-P2021/CQRSES_GROUP5/core/eventsourcing"
	gomock "github.com/golang/mock/gomock"
)

// MockRabbitMQ is a mock of RabbitMQ interface.
type MockRabbitMQ struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQMockRecorder
}

// MockRabbitMQMockRecorder is the mock recorder for MockRabbitMQ.
type MockRabbitMQMockRecorder struct {
	mock *MockRabbitMQ
}

// NewMockRabbitMQ creates a new mock instance.
func NewMockRabbitMQ(ctrl *gomock.Controller) *MockRabbitMQ {
	mock := &MockRabbitMQ{ctrl: ctrl}
	mock.recorder = &MockRabbitMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQ) EXPECT() *MockRabbitMQMockRecorder {
	return m.recorder
}

// PublishEventToRBMQ mocks base method.
func (m *MockRabbitMQ) PublishEventToRBMQ(arg0 eventsourcing.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEventToRBMQ", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventToRBMQ indicates an expected call of PublishEventToRBMQ.
func (mr *MockRabbitMQMockRecorder) PublishEventToRBMQ(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventToRBMQ", reflect.TypeOf((*MockRabbitMQ)(nil).PublishEventToRBMQ), arg0)
}
